# -*- coding: utf-8 -*-
"""Projeto 2 - EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17kH700i3Cty6iSJ8VVsc8iQCssTlUZX9
"""

# Codigo para plotar os gráficos a partir do json

import matplotlib.pyplot as plt
import json
import os
import zipfile

data = {}
dir = "graficos"

with open('./dados.json', 'r', encoding='utf-8') as json_file:
		 data = json.load(json_file)

# Reformular Json
for operation in data:
    for vector_type in data[operation]:
        for tree in data[operation][vector_type]:
            if operation == "Insercao":
                data = old_json[tree][vector_type][operation]
                values = [item for sublist in data.values() for item in sublist]

                data[operation][vector_type][tree] = values
            else:
                values = old_json[tree][vector_type][operation]

                for type2 in values:
                    data[tree][type2][type2] = values[type2]


if not os.path.exists(dir):
	 os.mkdir(dir)

for tipo_vetor, vetor_data in data["Operação de Inserção"].items():

			plt.figure(figsize=(10, 5))

			for nome_arvore, dados_arvore in vetor_data.items():
					tamanhos_vetores = [dado["sizeVectorInsertion"] for dado in dados_arvore]
					tempos = [dado["time"]  for dado in dados_arvore]

					tempos.append(0)
					tamanhos_vetores.append(0)

					tempos.sort()
					tamanhos_vetores.sort()

					plt.plot(tamanhos_vetores, tempos, marker='o', label=nome_arvore)

			plt.title(f'Operação de Inserção - {tipo_vetor}')
			plt.xlabel('Tamanho do Vetor')
			plt.ylabel('Tempo (Segundos)', fontsize=12)
			plt.legend()

			path = os.path.join(dir, f'Operação de Inserção - {tipo_vetor} - {nome_arvore}.png')
			plt.savefig(path)


for tipo_vetor_busca, vetor_data_busca in data["Operação de Busca"].items():

		for nome_arvore_busca, dados_arvore_busca in vetor_data_busca.items():

				plt.figure(figsize=(10, 5))

				for vetor_busca, dados_vetor_busca in dados_arvore_busca.items():
						tamanhos_vetores = [dado["sizeVectorInsertion"] for dado in dados_vetor_busca]
						tempos = [dado["time"] / 1000 for dado in dados_vetor_busca]

						tempos.append(0)
						tamanhos_vetores.append(0)

						tempos.sort()
						tamanhos_vetores.sort()
						plt.plot(tamanhos_vetores, tempos, marker='o', label=vetor_busca)

				plt.title(f'Operação de Busca - {nome_arvore_busca} - {tipo_vetor_busca}')
				plt.xlabel('Tamanho do Vetor')
				plt.ylabel('Tempo (Segundos)', fontsize=12)
				plt.legend()

				path = os.path.join(dir, f'Operação de Busca - {vetor_busca} - {tipo_vetor_busca} - {nome_arvore_busca}.png')
				plt.savefig(path)


def zip_folder(folder_path, output_zip):
    with zipfile.ZipFile(output_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, folder_path)
                zipf.write(file_path, arcname)

output_zip_file = 'graficos.zip'

zip_folder(dir, output_zip_file)